# Code Generated by Sidekick is for learning and experimentation purposes only.
from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
from .util import get_metrics, fetch_fmp_analyst_estimates, extract_metric_by_year

app = FastAPI()

class MetricsResponse(BaseModel):
    TTM_PE: float | None
    Forward_PE: float | None
    Two_Year_Forward_PE: float | None
    TTM_EPS_Growth: float | None
    Current_Year_EPS_Growth: float | None
    Next_Year_EPS_Growth: float | None
    TTM_Revenue_Growth: float | None
    Current_Year_Revenue_Growth: float | None
    Next_Year_Revenue_Growth: float | None
    Gross_Margin: float | None
    Net_Margin: float | None
    TTM_PS_Ratio: float | None
    Forward_PS_Ratio: float | None

@app.get("/health")
def health_check():
    return {"status": "ok"}

@app.get("/metrics", response_model=MetricsResponse)
def metrics(ticker: str = Query(..., description="Stock ticker symbol")):
    data = get_metrics(ticker)
    # Rename key for response model compatibility
    data["Two_Year_Forward_PE"] = data.pop("2_Year_Forward_PE")
    return data

@app.get("/revenue")
def get_revenue(ticker: str = Query(..., description="Stock ticker symbol")):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    revenue_dict = extract_metric_by_year(fmp_data, "revenueAvg")
    return revenue_dict

# Code Generated by Sidekick is for learning and experimentation purposes only.
@app.get("/net-income")
def get_net_income(ticker: str = Query(..., description="Stock ticker symbol")):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    net_income_dict = extract_metric_by_year(fmp_data, "netIncomeAvg")
    return net_income_dict

@app.get("/eps")
def get_eps(ticker: str = Query(..., description="Stock ticker symbol")):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    eps_dict = extract_metric_by_year(fmp_data, "epsAvg")
    return eps_dict
