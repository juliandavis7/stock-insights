# Code Generated by Sidekick is for learning and experimentation purposes only.
import yfinance as yf
import requests
from .constants import FMP_API_KEY, FMP_ANALYST_ESTIMATES_URL

def fetch_fmp_analyst_estimates(ticker, api_key=FMP_API_KEY):
    url = f"{FMP_ANALYST_ESTIMATES_URL}?symbol={ticker}&period=annual&page=0&limit=10&apikey={api_key}"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"FMP API Error: {e}")
        return []

def get_ttm_pe(stock_info):
    val = stock_info.get('trailingPE', None)
    return round(val, 2) if val is not None else None

def get_forward_pe(stock_info):
    val = stock_info.get('forwardPE', None)
    return round(val, 2) if val is not None else None

def get_ttm_ps(stock_info):
    val = stock_info.get('priceToSalesTrailing12Months', None)
    return round(val, 2) if val is not None else None

def get_gross_margin(stock_info):
    val = stock_info.get('grossMargins', None)
    return round(val, 2) if val is not None else None

def get_net_margin(stock_info):
    val = stock_info.get('profitMargins', None)
    return round(val, 2) if val is not None else None

def get_earnings_growth(stock_info):
    val = stock_info.get('earningsGrowth', None)
    return round(val * 100, 2) if val is not None else None

def get_revenue_growth(stock_info):
    val = stock_info.get('revenueGrowth', None)
    return round(val * 100, 2) if val is not None else None

def get_current_year_eps_growth(earnings_forecast):
    try:
        return round(earnings_forecast.loc['0y', 'growth'] * 100, 2)
    except Exception:
        return None

def get_next_year_eps_growth(earnings_forecast):
    try:
        return round(earnings_forecast.loc['+1y', 'growth'] * 100, 2)
    except Exception:
        return None

def get_current_year_revenue_growth(revenue_forecast):
    try:
        return round(revenue_forecast.loc['0y', 'growth'] * 100, 2)
    except Exception:
        return None

def get_next_year_revenue_growth(revenue_forecast):
    try:
        return round(revenue_forecast.loc['+1y', 'growth'] * 100, 2)
    except Exception:
        return None

def get_forward_ps_ratio(stock_info, revenue_forecast):
    try:
        market_cap = stock_info.get('marketCap', None)
        next_year_revenue = revenue_forecast.loc['+1y', 'avg']
        if market_cap is None or next_year_revenue is None or next_year_revenue == 0:
            return None
        return round(market_cap / next_year_revenue, 2)
    except Exception:
        return None

def get_two_year_forward_pe(ticker, current_price, api_key=FMP_API_KEY):
    estimates = fetch_fmp_analyst_estimates(ticker, api_key)
    years = sorted([int(item["date"][:4]) for item in estimates], reverse=True)
    if not years or len(years) < 3:
        return None
    target_year = str(years[2])
    for estimate in estimates:
        if estimate["date"].startswith(target_year):
            eps = estimate.get("epsAvg")
            if eps is not None and eps != 0:
                return round(current_price / eps, 2)
    return None

def get_metrics(ticker):
    stock = yf.Ticker(ticker)
    stock_info = stock.info

    try:
        earnings_forecast = stock.earnings_estimate
    except Exception:
        earnings_forecast = None
    try:
        revenue_forecast = stock.revenue_estimate
    except Exception:
        revenue_forecast = None

    current_price = stock_info.get("regularMarketPrice", None)
    two_year_forward_pe = None
    if current_price is not None:
        two_year_forward_pe = get_two_year_forward_pe(ticker, current_price)

    metrics = {
        "TTM_PE": get_ttm_pe(stock_info),
        "Forward_PE": get_forward_pe(stock_info),
        "2_Year_Forward_PE": two_year_forward_pe,
        "TTM_EPS_Growth": get_earnings_growth(stock_info),
        "Current_Year_EPS_Growth": get_current_year_eps_growth(earnings_forecast) if earnings_forecast is not None else None,
        "Next_Year_EPS_Growth": get_next_year_eps_growth(earnings_forecast) if earnings_forecast is not None else None,
        "TTM_Revenue_Growth": get_revenue_growth(stock_info),
        "Current_Year_Revenue_Growth": get_current_year_revenue_growth(revenue_forecast) if revenue_forecast is not None else None,
        "Next_Year_Revenue_Growth": get_next_year_revenue_growth(revenue_forecast) if revenue_forecast is not None else None,
        "Gross_Margin": get_gross_margin(stock_info),
        "Net_Margin": get_net_margin(stock_info),
        "TTM_PS_Ratio": get_ttm_ps(stock_info),
        "Forward_PS_Ratio": get_forward_ps_ratio(stock_info, revenue_forecast),
    }
    return metrics

def extract_metric_by_year(fmp_data, metric):
    """
    fmp_data: list of dicts from FMP analyst-estimates API
    metric: string, e.g. "revenueAvg", "netIncomeAvg", "epsAvg"
    returns: dict mapping year (int) to metric value (float)
    """
    metric_by_year = {}
    for item in fmp_data:
        if "date" in item and metric in item:
            year = int(item["date"][:4])
            metric_by_year[year] = item[metric]
    return metric_by_year
