commit 37cabf6a6da56591f843095e974ece139cb42107
Author: juliandavis7 <juliandavis715@gmail.com>
Date:   Tue Aug 5 12:32:37 2025 -0700

    completed dev for financials page

diff --git a/api/__pycache__/api.cpython-313.pyc b/api/__pycache__/api.cpython-313.pyc
index 0342e21..d44c831 100644
Binary files a/api/__pycache__/api.cpython-313.pyc and b/api/__pycache__/api.cpython-313.pyc differ
diff --git a/api/api.py b/api/api.py
index 207da3c..6c25717 100644
--- a/api/api.py
+++ b/api/api.py
@@ -1,9 +1,12 @@
 # Code Generated by Sidekick is for learning and experimentation purposes only.
 from fastapi import FastAPI, HTTPException, Query
 from fastapi.middleware.cors import CORSMiddleware
-from .models import MetricsResponse, ProjectionRequest, ProjectionResponse, ProjectionBaseDataResponse, ErrorResponse
+from typing import List
+import httpx
+from .models import MetricsResponse, ProjectionRequest, ProjectionResponse, ProjectionBaseDataResponse, ErrorResponse, FinancialStatementResponse, FinancialDataResponse, AnalystEstimateResponse, ComprehensiveFinancialResponse
 from .util import get_metrics, fetch_fmp_analyst_estimates, extract_metric_by_year, calculate_financial_projections, validate_projection_inputs
 from .services.projection_service import ProjectionService
+from .services.yfinance_service import YFinanceService
 from .constants import FMP_API_KEY
 
 app = FastAPI()
@@ -171,3 +174,245 @@ def get_projection_base_data(ticker: str = Query(..., description="Stock ticker
                 "ticker": ticker.upper()
             }
         )
+
+
+@app.get("/mock-income-statement", response_model=List[FinancialStatementResponse])
+def get_financial_statements(ticker: str = Query(..., description="Stock ticker symbol")):
+    """
+    Mock endpoint to return hardcoded financial statement data for development.
+    Returns 3 years of mock data (2024, 2023, 2022) similar to FMP API response.
+    
+    Args:
+        ticker: Stock ticker symbol (e.g., AAPL)
+        
+    Returns:
+        List of financial statement data for the past 3 years
+    """
+    
+    # Mock financial data for different tickers
+    mock_data = {
+        "AAPL": [
+            {
+                "date": "2024-09-28",
+                "symbol": "AAPL",
+                "reportedCurrency": "USD",
+                "cik": "0000320193",
+                "filingDate": "2024-11-01",
+                "acceptedDate": "2024-11-01 06:01:36",
+                "fiscalYear": "2024",
+                "period": "FY",
+                "revenue": 391035000000,
+                "costOfRevenue": 210352000000,
+                "grossProfit": 180683000000,
+                "researchAndDevelopmentExpenses": 31370000000,
+                "generalAndAdministrativeExpenses": 0,
+                "sellingAndMarketingExpenses": 0,
+                "sellingGeneralAndAdministrativeExpenses": 26097000000,
+                "otherExpenses": 0,
+                "operatingExpenses": 57467000000,
+                "costAndExpenses": 267819000000,
+                "netInterestIncome": 0,
+                "interestIncome": 0,
+                "interestExpense": 0,
+                "depreciationAndAmortization": 11445000000,
+                "ebitda": 134661000000,
+                "ebit": 123216000000,
+                "nonOperatingIncomeExcludingInterest": 0,
+                "operatingIncome": 123216000000,
+                "totalOtherIncomeExpensesNet": 269000000,
+                "incomeBeforeTax": 123485000000,
+                "incomeTaxExpense": 29749000000,
+                "netIncomeFromContinuingOperations": 93736000000,
+                "netIncomeFromDiscontinuedOperations": 0,
+                "otherAdjustmentsToNetIncome": 0,
+                "netIncome": 93736000000,
+                "netIncomeDeductions": 0,
+                "bottomLineNetIncome": 93736000000,
+                "eps": 6.11,
+                "epsDiluted": 6.08,
+                "weightedAverageShsOut": 15343783000,
+                "weightedAverageShsOutDil": 15408095000
+            },
+            {
+                "date": "2023-09-30",
+                "symbol": "AAPL",
+                "reportedCurrency": "USD",
+                "cik": "0000320193",
+                "filingDate": "2023-11-03",
+                "acceptedDate": "2023-11-03 06:01:25",
+                "fiscalYear": "2023",
+                "period": "FY",
+                "revenue": 383285000000,
+                "costOfRevenue": 214137000000,
+                "grossProfit": 169148000000,
+                "researchAndDevelopmentExpenses": 29915000000,
+                "generalAndAdministrativeExpenses": 0,
+                "sellingAndMarketingExpenses": 0,
+                "sellingGeneralAndAdministrativeExpenses": 24932000000,
+                "otherExpenses": 0,
+                "operatingExpenses": 54847000000,
+                "costAndExpenses": 268984000000,
+                "netInterestIncome": 0,
+                "interestIncome": 0,
+                "interestExpense": 0,
+                "depreciationAndAmortization": 11519000000,
+                "ebitda": 125820000000,
+                "ebit": 114301000000,
+                "nonOperatingIncomeExcludingInterest": 0,
+                "operatingIncome": 114301000000,
+                "totalOtherIncomeExpensesNet": -565000000,
+                "incomeBeforeTax": 113736000000,
+                "incomeTaxExpense": 16741000000,
+                "netIncomeFromContinuingOperations": 96995000000,
+                "netIncomeFromDiscontinuedOperations": 0,
+                "otherAdjustmentsToNetIncome": 0,
+                "netIncome": 96995000000,
+                "netIncomeDeductions": 0,
+                "bottomLineNetIncome": 96995000000,
+                "eps": 6.16,
+                "epsDiluted": 6.13,
+                "weightedAverageShsOut": 15744231000,
+                "weightedAverageShsOutDil": 15812547000
+            },
+            {
+                "date": "2022-09-24",
+                "symbol": "AAPL",
+                "reportedCurrency": "USD",
+                "cik": "0000320193",
+                "filingDate": "2022-10-28",
+                "acceptedDate": "2022-10-28 06:01:15",
+                "fiscalYear": "2022",
+                "period": "FY",
+                "revenue": 394328000000,
+                "costOfRevenue": 223546000000,
+                "grossProfit": 170782000000,
+                "researchAndDevelopmentExpenses": 26251000000,
+                "generalAndAdministrativeExpenses": 0,
+                "sellingAndMarketingExpenses": 0,
+                "sellingGeneralAndAdministrativeExpenses": 25094000000,
+                "otherExpenses": 0,
+                "operatingExpenses": 51345000000,
+                "costAndExpenses": 274891000000,
+                "netInterestIncome": 0,
+                "interestIncome": 0,
+                "interestExpense": 0,
+                "depreciationAndAmortization": 11104000000,
+                "ebitda": 130541000000,
+                "ebit": 119437000000,
+                "nonOperatingIncomeExcludingInterest": 0,
+                "operatingIncome": 119437000000,
+                "totalOtherIncomeExpensesNet": -334000000,
+                "incomeBeforeTax": 119103000000,
+                "incomeTaxExpense": 19300000000,
+                "netIncomeFromContinuingOperations": 99803000000,
+                "netIncomeFromDiscontinuedOperations": 0,
+                "otherAdjustmentsToNetIncome": 0,
+                "netIncome": 99803000000,
+                "netIncomeDeductions": 0,
+                "bottomLineNetIncome": 99803000000,
+                "eps": 6.15,
+                "epsDiluted": 6.11,
+                "weightedAverageShsOut": 16215963000,
+                "weightedAverageShsOutDil": 16325819000
+            }
+        ]
+    }
+    
+    ticker_upper = ticker.upper()
+    
+    # Return AAPL data for any ticker (for development purposes)
+    # In a real implementation, you would have different mock data for different tickers
+    if ticker_upper in mock_data:
+        return mock_data[ticker_upper]
+    else:
+        # Return AAPL data as default for any unknown ticker
+        return mock_data["AAPL"]
+
+
+@app.get("/financials", response_model=ComprehensiveFinancialResponse)
+def get_financials(ticker: str = Query(..., description="Stock ticker symbol")):
+    """
+    Get comprehensive financial data including historical data and analyst estimates.
+    Returns structured financial data with key metrics for each year plus future estimates.
+    
+    Args:
+        ticker: Stock ticker symbol (e.g., AAPL)
+        
+    Returns:
+        Comprehensive financial data including historical and analyst estimates
+    """
+    
+    try:
+        yfinance_service = YFinanceService()
+        financial_data = yfinance_service.get_annual_income_statement(ticker.upper())
+        
+        if not financial_data:
+            raise HTTPException(
+                status_code=404,
+                detail=f"No financial data available for ticker {ticker}"
+            )
+        
+        # Get current price and market cap
+        current_price = yfinance_service.get_current_price(ticker.upper())
+        market_cap = yfinance_service.get_market_cap(ticker.upper())
+        
+        # Convert historical data to FinancialDataResponse objects
+        historical_data = []
+        
+        for year_data in financial_data:
+            processed_year = FinancialDataResponse(
+                fiscalYear=year_data.get("fiscalYear"),
+                totalRevenue=year_data.get("totalRevenue"),
+                costOfRevenue=year_data.get("costOfRevenue"),
+                grossProfit=year_data.get("grossProfit"),
+                sellingGeneralAndAdministrative=year_data.get("sellingGeneralAndAdministrative"),
+                researchAndDevelopment=year_data.get("researchAndDevelopment"),
+                operatingExpenses=year_data.get("operatingExpenses"),
+                operatingIncome=year_data.get("operatingIncome"),
+                netIncome=year_data.get("netIncome"),
+                eps=year_data.get("eps"),
+                dilutedEps=year_data.get("dilutedEps")
+            )
+            historical_data.append(processed_year)
+        
+        # Generate mock analyst estimates for 2025-2027
+        # Get latest year's data as baseline for growth projections
+        latest_year_data = financial_data[0] if financial_data else {}
+        base_revenue = latest_year_data.get("totalRevenue", 100000000000)  # Default 100B
+        base_net_income = latest_year_data.get("netIncome", 10000000000)   # Default 10B
+        base_eps = latest_year_data.get("eps", 5.0)                       # Default 5.0
+        base_diluted_eps = latest_year_data.get("dilutedEps", 4.95)       # Default 4.95
+        
+        # Mock analyst estimates with realistic growth assumptions
+        estimates_data = []
+        growth_rates = [0.08, 0.12, 0.10]  # 8%, 12%, 10% growth for 2025, 2026, 2027
+        
+        for i, year in enumerate([2025, 2026, 2027]):
+            cumulative_growth = 1
+            for j in range(i + 1):
+                cumulative_growth *= (1 + growth_rates[j])
+            
+            estimate = AnalystEstimateResponse(
+                fiscalYear=str(year),
+                totalRevenue=int(base_revenue * cumulative_growth) if base_revenue else None,
+                netIncome=int(base_net_income * cumulative_growth) if base_net_income else None,
+                eps=round(base_eps * cumulative_growth, 2) if base_eps else None,
+                dilutedEps=round(base_diluted_eps * cumulative_growth, 2) if base_diluted_eps else None
+            )
+            estimates_data.append(estimate)
+        
+        return ComprehensiveFinancialResponse(
+            ticker=ticker.upper(),
+            price=current_price,
+            market_cap=market_cap,
+            historical=historical_data,
+            estimates=estimates_data
+        )
+        
+    except HTTPException:
+        raise
+    except Exception as e:
+        raise HTTPException(
+            status_code=500,
+            detail=f"Internal server error: {str(e)}"
+        )
diff --git a/api/models/__init__.py b/api/models/__init__.py
index d16e4c3..b930871 100644
--- a/api/models/__init__.py
+++ b/api/models/__init__.py
@@ -1,6 +1,6 @@
 # Models package for FastAPI application
 from .requests import YearProjection, ProjectionRequest
-from .responses import MetricsResponse, ProjectionResponse, ProjectionBaseDataResponse, ErrorResponse
+from .responses import MetricsResponse, ProjectionResponse, ProjectionBaseDataResponse, ErrorResponse, FinancialStatementResponse, FinancialDataResponse, AnalystEstimateResponse, ComprehensiveFinancialResponse
 
 __all__ = [
     "YearProjection",
@@ -8,5 +8,9 @@ __all__ = [
     "MetricsResponse",
     "ProjectionResponse",
     "ProjectionBaseDataResponse",
-    "ErrorResponse"
+    "ErrorResponse",
+    "FinancialStatementResponse",
+    "FinancialDataResponse",
+    "AnalystEstimateResponse",
+    "ComprehensiveFinancialResponse"
 ]
\ No newline at end of file
diff --git a/api/models/__pycache__/__init__.cpython-313.pyc b/api/models/__pycache__/__init__.cpython-313.pyc
index 2c84328..1635ffe 100644
Binary files a/api/models/__pycache__/__init__.cpython-313.pyc and b/api/models/__pycache__/__init__.cpython-313.pyc differ
diff --git a/api/models/__pycache__/responses.cpython-313.pyc b/api/models/__pycache__/responses.cpython-313.pyc
index 6ea72f7..4ead9d7 100644
Binary files a/api/models/__pycache__/responses.cpython-313.pyc and b/api/models/__pycache__/responses.cpython-313.pyc differ
diff --git a/api/models/responses.py b/api/models/responses.py
index 2c5af31..748f7c0 100644
--- a/api/models/responses.py
+++ b/api/models/responses.py
@@ -1,7 +1,7 @@
 """Response models for the FastAPI application"""
 
 from pydantic import BaseModel
-from typing import Dict, Optional, Any
+from typing import Dict, Optional, Any, List
 
 
 class MetricsResponse(BaseModel):
@@ -49,6 +49,80 @@ class ProjectionBaseDataResponse(BaseModel):
     data_year: int
 
 
+class FinancialStatementResponse(BaseModel):
+    """Model for financial statement response (mock FMP API response)"""
+    date: str
+    symbol: str
+    reportedCurrency: str
+    cik: str
+    filingDate: str
+    acceptedDate: str
+    fiscalYear: str
+    period: str
+    revenue: int
+    costOfRevenue: int
+    grossProfit: int
+    researchAndDevelopmentExpenses: int
+    generalAndAdministrativeExpenses: int
+    sellingAndMarketingExpenses: int
+    sellingGeneralAndAdministrativeExpenses: int
+    otherExpenses: int
+    operatingExpenses: int
+    costAndExpenses: int
+    netInterestIncome: int
+    interestIncome: int
+    interestExpense: int
+    depreciationAndAmortization: int
+    ebitda: int
+    ebit: int
+    nonOperatingIncomeExcludingInterest: int
+    operatingIncome: int
+    totalOtherIncomeExpensesNet: int
+    incomeBeforeTax: int
+    incomeTaxExpense: int
+    netIncomeFromContinuingOperations: int
+    netIncomeFromDiscontinuedOperations: int
+    otherAdjustmentsToNetIncome: int
+    netIncome: int
+    netIncomeDeductions: int
+    bottomLineNetIncome: int
+    eps: float
+    epsDiluted: float
+    weightedAverageShsOut: int
+    weightedAverageShsOutDil: int
+
+
+class AnalystEstimateResponse(BaseModel):
+    """Model for analyst estimates data"""
+    fiscalYear: str
+    totalRevenue: int | None
+    netIncome: int | None
+    eps: float | None
+    dilutedEps: float | None
+
+class FinancialDataResponse(BaseModel):
+    """Model for processed financial data response"""
+    fiscalYear: str
+    totalRevenue: int | None
+    costOfRevenue: int | None
+    grossProfit: int | None
+    sellingGeneralAndAdministrative: int | None
+    researchAndDevelopment: int | None
+    operatingExpenses: int | None
+    operatingIncome: int | None
+    netIncome: int | None
+    eps: float | None
+    dilutedEps: float | None
+
+class ComprehensiveFinancialResponse(BaseModel):
+    """Model for comprehensive financial data including historical and analyst estimates"""
+    ticker: str
+    price: float | None
+    market_cap: float | None
+    historical: List[FinancialDataResponse]
+    estimates: List[AnalystEstimateResponse]
+
+
 class ErrorResponse(BaseModel):
     """Model for error responses"""
     success: bool = False
diff --git a/api/requirements.txt b/api/requirements.txt
index e910c35..746a3d2 100644
--- a/api/requirements.txt
+++ b/api/requirements.txt
@@ -4,4 +4,5 @@ yfinance>=0.2.0
 uvicorn[standard]>=0.24.0
 requests>=2.31.0
 pandas>=2.0.0
-python-multipart>=0.0.6
\ No newline at end of file
+python-multipart>=0.0.6
+httpx>=0.24.0
\ No newline at end of file
diff --git a/api/services/__pycache__/yfinance_service.cpython-313.pyc b/api/services/__pycache__/yfinance_service.cpython-313.pyc
index 1f0dde6..b6e17ec 100644
Binary files a/api/services/__pycache__/yfinance_service.cpython-313.pyc and b/api/services/__pycache__/yfinance_service.cpython-313.pyc differ
diff --git a/api/services/yfinance_service.py b/api/services/yfinance_service.py
index 8b51a7b..7473419 100644
--- a/api/services/yfinance_service.py
+++ b/api/services/yfinance_service.py
@@ -1,6 +1,7 @@
 """YFinance service for fetching stock data from Yahoo Finance."""
 
 import yfinance as yf
+import pandas as pd
 import logging
 from typing import Dict, Any, Optional
 from .. import util
@@ -229,4 +230,71 @@ class YFinanceService:
             
         except Exception as e:
             logger.error(f"Error fetching market cap for {ticker}: {e}")
+            return None
+    
+    def get_annual_income_statement(self, ticker: str) -> Optional[list]:
+        """
+        Get annual income statement data using yfinance.
+        
+        Args:
+            ticker: Stock ticker symbol
+            
+        Returns:
+            List of annual financial data or None if failed
+        """
+        try:
+            stock = yf.Ticker(ticker)
+            financials = stock.financials
+            
+            if financials.empty:
+                logger.warning(f"No financial data available for {ticker}")
+                return None
+            
+            # Define the metrics we want to extract (matching the test.py approach exactly)
+            metric_mapping = {
+                'totalRevenue': ['Total Revenue', 'Revenue'],
+                'costOfRevenue': ['Cost Of Revenue', 'Cost of Revenue'],
+                'grossProfit': ['Gross Profit'],
+                'sellingGeneralAndAdministrative': ['Selling General And Administration', 'Selling General And Administrative', 'Selling General Administrative'],
+                'researchAndDevelopment': ['Research And Development', 'Research Development'],
+                'operatingExpenses': ['Operating Expense', 'Total Operating Expenses'],
+                'operatingIncome': ['Operating Income', 'Operating Revenue'],
+                'netIncome': ['Net Income', 'Net Income Common Stockholders'],
+                'eps': ['Basic EPS', 'Earnings Per Share'],
+                'dilutedEps': ['Diluted EPS', 'Diluted Earnings Per Share']
+            }
+            
+            # Extract data for each year
+            financial_data = []
+            
+            for year_col in financials.columns:
+                year_data = {
+                    'fiscalYear': str(year_col.year)
+                }
+                
+                for our_key, possible_names in metric_mapping.items():
+                    value = None
+                    
+                    # Try to find the metric in financials
+                    for name in possible_names:
+                        if name in financials.index:
+                            value = financials.loc[name, year_col]
+                            break
+                    
+                    if value is not None and not pd.isna(value):
+                        # For EPS fields, keep as float; for others, convert to int
+                        if our_key in ['eps', 'dilutedEps']:
+                            year_data[our_key] = float(value)
+                        else:
+                            year_data[our_key] = int(float(value))
+                    else:
+                        year_data[our_key] = None
+                
+                financial_data.append(year_data)
+            
+            logger.info(f"Successfully fetched annual income statement for {ticker}")
+            return financial_data
+            
+        except Exception as e:
+            logger.error(f"Error fetching annual income statement for {ticker}: {e}")
             return None
\ No newline at end of file
diff --git a/api/test.py b/api/test.py
index 877f7b8..b0ecc7a 100644
--- a/api/test.py
+++ b/api/test.py
@@ -1,152 +1,51 @@
 import yfinance as yf
-import requests
-from typing import Dict, Optional
 import pandas as pd
-from datetime import datetime
 
-def get_stock_current_data(ticker: str, fmp_api_key: str) -> Optional[Dict[str, float]]:
-    """
-    Fetch current stock data using yfinance and FMP API.
+def get_sga_three_years(ticker):
+    """Get SG&A for 2022-2024"""
     
-    Args:
-        ticker: Stock ticker symbol (e.g., 'AAPL', 'PYPL')
-        fmp_api_key: Financial Modeling Prep API key
-    
-    Returns:
-        Dictionary containing current stock data:
-        - revenue: Current year revenue estimate from FMP
-        - net_income: Current year net income estimate from FMP
-        - current_year_eps: Current year EPS estimate from FMP
-        - price: Current stock price
-        - market_cap: Current market capitalization
-        - shares_outstanding: Current shares outstanding
-        
-        Returns None if data cannot be fetched or processed
-    """
     try:
-        # Create yfinance Ticker object
         stock = yf.Ticker(ticker)
+        financials = stock.financials
         
-        # Get stock info (contains price, market cap, shares data)
-        info = stock.info
-        
-        # Fetch current stock price
-        price = (
-            info.get('currentPrice') or 
-            info.get('regularMarketPrice') or 
-            info.get('previousClose')
-        )
+        # The correct field name (without the final 'e')
+        sga_field = 'Selling General And Administration'
         
-        # Fetch market cap
-        market_cap = info.get('marketCap')
+        print(f"=== SG&A for {ticker} (2022-2024) ===")
         
-        # Fetch shares outstanding
-        shares_outstanding = (
-            info.get('sharesOutstanding') or 
-            info.get('impliedSharesOutstanding') or 
-            info.get('floatShares')
-        )
-        
-        # Fetch current year financial data from FMP API
-        current_year = datetime.now().year
-        revenue = None
-        net_income = None
-        current_year_eps = None
-        
-        try:
-            # FMP API call for analyst estimates
-            fmp_url = "https://financialmodelingprep.com/stable/analyst-estimates"
-            params = {
-                "symbol": ticker,
-                "period": "annual",
-                "page": 0,
-                "limit": 10,
-                "apikey": fmp_api_key
-            }
+        if sga_field in financials.index:
+            print(f"Field found: '{sga_field}'\n")
             
-            response = requests.get(fmp_url, params=params)
-            response.raise_for_status()
+            # Get SG&A values for each year
+            sga_data = []
+            for year_col in financials.columns[:3]:  # Last 3 years
+                year = year_col.year
+                value = financials.loc[sga_field, year_col]
+                
+                if pd.notna(value):
+                    sga_data.append({
+                        'year': year,
+                        'sga': int(value)
+                    })
+                    print(f"{year}: ${value:,.0f}")
+                else:
+                    print(f"{year}: No data")
             
-            fmp_data = response.json()
+            # Return as structured data
+            return sga_data
             
-            if fmp_data:
-                # Find current year data
-                for record in fmp_data:
-                    if record.get('date'):
-                        # Extract year from date (format: YYYY-MM-DD)
-                        record_year = int(record['date'][:4])
-                        if record_year == current_year:
-                            revenue = record.get('revenueAvg')
-                            net_income = record.get('netIncomeAvg')
-                            current_year_eps = record.get('epsAvg')
-                            break
-                
-                if revenue is None:
-                    print(f"No current year ({current_year}) data found for {ticker} in FMP API")
-            else:
-                print(f"No data returned from FMP API for {ticker}")
-                
-        except requests.exceptions.RequestException as e:
-            print(f"FMP API request failed for {ticker}: {e}")
-        except (KeyError, ValueError) as e:
-            print(f"Error parsing FMP API response for {ticker}: {e}")
-        
-        # Check if we have all required basic data
-        if any(x is None for x in [price, market_cap, shares_outstanding]):
-            print(f"Missing basic stock data for {ticker}")
+        else:
+            print(f"Field '{sga_field}' not found!")
             return None
-        
-        # Build result dictionary
-        result = {
-            'ticker': ticker,
-            'revenue': float(revenue) if revenue else None,
-            'net_income': float(net_income) if net_income else None,
-            'current_year_eps': float(current_year_eps) if current_year_eps else None,
-            'price': float(price),
-            'market_cap': float(market_cap),
-            'shares_outstanding': float(shares_outstanding),
-            'data_year': current_year
-        }
-        
-        return result
-        
+            
     except Exception as e:
-        print(f"Error fetching data for {ticker}: {e}")
+        print(f"Error: {e}")
         return None
 
-# Example usage and testing
+# Test with different tickers
 if __name__ == "__main__":
-    # You'll need to set your FMP API key
-    FMP_API_KEY = "kFoyQBTilV6J4OIfCd9RdhTeTb8CeK5B"  # Replace with your actual API key
+    tickers = ["AAPL", "PYPL", "MSFT"]  # Add more tickers here
     
-    print("\n" + "="*50)
-    print("Sample usage with FMP API integration:")
-    print("="*50)
-    
-    # Test with SOFI (from your example)
-    sofi_data = get_stock_current_data("SOFI", FMP_API_KEY)
-    if sofi_data:
-        print(f"\nSOFI data for {sofi_data['data_year']}:")
-        print(f"  ticker: {sofi_data['ticker']}")
-        print(f"  price: ${sofi_data['price']:.2f}")
-        print(f"  market_cap: ${sofi_data['market_cap']:,.0f}")
-        print(f"  shares_outstanding: {sofi_data['shares_outstanding']:,.0f}")
-        
-        if sofi_data['revenue']:
-            revenue_millions = sofi_data['revenue'] / 1_000_000
-            print(f"  revenue: ${revenue_millions:.1f}M (${sofi_data['revenue']:,.0f})")
-        else:
-            print("  revenue: Not Available")
-        
-        if sofi_data['net_income']:
-            net_income_millions = sofi_data['net_income'] / 1_000_000
-            print(f"  net_income: ${net_income_millions:.1f}M (${sofi_data['net_income']:,.0f})")
-        else:
-            print("  net_income: Not Available")
-            
-        if sofi_data['current_year_eps']:
-            print(f"  current_year_eps: ${sofi_data['current_year_eps']:.2f}")
-        else:
-            print("  current_year_eps: Not Available")
-    else:
-        print("❌ Failed to fetch SOFI data")
\ No newline at end of file
+    for ticker in tickers:
+        data = get_sga_three_years(ticker)
+        print()  # Empty line between tickers
\ No newline at end of file
